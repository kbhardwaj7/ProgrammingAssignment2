## This function creates a special "matrix" object that can cache its inverse
## The output of the function should be the input to the next function where inverse will be computed, if required
  
  makeCacheMatrix <- function(x = matrix()) {
 -
 +        ## @x: matrix inverse
 +        ## input to cacheSolve()
 +        
 +        inv = NULL
 +        set = function(y) {
 +             
 +                x <<- y
 +                inv <<- NULL
 +        }
 +        get = function() x
 +        setinv = function(inverse) inv <<- inverse 
 +        getinv = function() inv
 +        list(set=set, get=get, setinv=setinv, getinv=getinv)
  }
  
  
  ## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. 
  ## If the inverse has already been calculated, then the funtion will retrieve the inverse from the cache
  ## This function assumes that the inverse of the matrix exists
  
  cacheSolve <- function(x, ...) {
 -        ## Return a matrix that is the inverse of 'x'
 +        ## @x: output of makeCacheMatrix()
 +                
 +        inv = x$getinv()
 +        
 +        # inverse is already there
 +        if (!is.null(inv)){
 +                # from cache no calculation
 +                message("from cache")
 +                return(inv)
 +        }
 +        
 +        # inverse is not there
 +        kmatrix.data = x$get()
 
          # computing inverse of the matrix
 +        inv = solve(kmatrix.data, ...)
 +        
 +        
 +        x$setinv(inv)
 +        
 +        return(inv)
  }
